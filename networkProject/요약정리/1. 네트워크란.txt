
@ 네트워크(Network)란?
-> net + work 의 합성어 : net(그물) + work(일) 
-> 단일로 쓰여진 매체를 통신이라는 매개체를 통하여 서로 연결되어 있는 환경

@ 네트워킹(Networking) 이란?
->  두 대 이상의 컴퓨터를 케이블로 연결하여 네트워크(Network)를 구성하는 작업


@ 네트워킹의 목적
-> 여러 개의 통신기기(컴퓨터,휴대폰 등)들을 서로 연결하여 데이터를 손쉽게 주고 주고 받거나
또는 자원(프린터 등)등을 공유하기 위함
-> 추가적으로 빠른 데이터 교환 목적도 있음

-> 자바에서 제공하는 java.net 패키지를 사용하면 어플리케이션끼리 데이터 통신을 할 수 있다.


@ 네트워크에서 필요한 개념
서버(Server) :  서비스를 제공하는 컴퓨터
클라이언트(Client) : 서비스를 사용하는(제공받는) 컴퓨터

-> 서비스를 제공(서버)하려면 서버용 프로그램이 있어야 하며 서비스를 이용(클라이언트)하려면
클라이언트용 프로그램이 각 각 있어야 한다.



@ 네트워크 모델
서버 기반 모델 (Server-Based Model) : 전용서버가 존재하는 모델 
- 장점
  -> 안정적인 서비스의 제공이 가능함
  -> 공유 데이터의 관리와 보안이 용이함

- 단점
  -> 서버 구축 비용과 관리 비용이 듬

ex) 웹 하드 업체

P2P 모델 (Peer-To-Peer Model) : 각 클라이언트끼리 연결되는 모델
- 장점
  -> 서버 구축 및 운용비용을 절감할 수 있음
  -> 자원의 활용을 극대화 할 수 있음

- 단점
  -> 자원 관리가 어려움
  -> 보안이 취약함

ex) 토렌트



@ 꼭 알아야 하는 네트워크 관련 용어

- 호스트  
	-> 네트워크가 가능한 하나의 통신 기기
	-> 2대의 컴퓨터 == 2대의 호스트
	



- IP 주소 (IP Address)
	-> IP 주소는 네트워크상에서 통신기기(대표적으로 컴퓨터)를 구별하는데 사용되는 고유한 주소
	-> IPv4 와 IPv6 가 있음 
	-> IPv4 는 4Byte(32bit)로 표현하며 IPv6(128bit)로 표현
	-> IPv4는 2^32개의 주소를 가짐, IPv6는 약 2^128개의 주소를 가짐
	-> 관련 클래스 : InetAddress
	



- URL (Uniform Resource Location)
	-> 인터넷에 존재하는 여러 서버들이 제공하는 자원에 접근할 수 있는 주소
	-> 프로토콜://호스트명:포트번호/경로명/파일명?쿼리스트링 의 형태로 되어 있음
	
	ex) http://www.naver.com
	-> 설명
		http 			: 프로토콜
		://  			: 프로토콜 구분자
		www.naver.com		: 호스트 이름(도메인 명)
	
	ex) http://200.200.200.5:80
	-> 설명
		http			: 프로토콜
		://			: 프로토콜 구분자
		200.200.200.5		: IP 주소
		:80			: 포트번호 (서비스 번호)


	-> 관련 클래스 : java.net.URL




- 프로토콜 (Protocol)
	-> 컴퓨터간의 정보를 주고 받을 때의 통신 방법에 대한 규약(규칙과 약속)
	-> 통신 규약이라고 부름
	-> 통신 규약은 상호간의 접속이나 전달방식, 통신방식, 데이터 형식, 검증 방법 등을 맞추기 위한 약속

	-> HTTP (HyperText Transfer Protocol)
	: 인터넷에서 웹 서버와 사용자의 인터넷 브라우저 사이에 문서를 전송하기 위해 사용되는 통신 규약

	-> FTP (File Transfer Protocol)
	: 인터넷을 통해 한 컴퓨터에서 다른 컴퓨터로 파일을 전송하기 위한 통신 규약

	-> Telnet (Telecommunication network)
	: 인터넷을 통하여 원격지의 호스트 컴퓨터에 접속할 때 사용되는 프로토콜




- Network Model
	-> 데이터를 만들때 최상의 효율성과 안정성을 보장하기 위해 만들어 놓은 구조 
	-> 통신이 일어나는 절차를 각 기능별로 모듈화시켜 만들어 놓은 계층적인 구조
	-> OSI 7 Layer 와 TCP/IP 모델이 있음


- OSI 7 Layer
	-> 국제 표준화 기구(ISO)에서 표준화를 위해 개발된 모델
	-> 현재 참조용으로 사용되고 있음
		- 각 계층의 역할에 맞는 개발에 참조
		- 문제 발생시 참조
		- 학습 목적으로 사용
	-> 7개의 계층으로 이루어져 있음
		7계층(Application) : 사용자 인터페이스 계층으로 사용자의 명령을 받아주는 계층
		6계층(Presentation) : 상위 계층에서 만들어진 데이터의 형태 표현 계층 (인코딩, 압축, 암호화 등)
		5계층(Session) : 하위 계층과 상위 계층의 세션 연결 및 동기화를 하기 위한 계층
		4계층(Transport) : 데이터 전송 방식 결정 계층 (TCP,UDP)
		3계층(Network) :  종단 간 연결 보장 계층 (출발지와 목적지 주소 부여 계층, IP Address)
		2계층(Data Link) : Node 간 연결 보장 계층 (인접 장비에 접근하기 위한 정보 부여 계층 , MAC Address)
		1계층(Physical) : 비트 형태의 신호를 패턴을 부여하여 전기적 신호로 변경하여 전송하는 계층

	-> 1~4 계층을 하위 계층 (하드웨어 계층) 이라고 함
		- 데이터 전달 계층으로 주로 네트워크 분야에서 참조
	-> 5~7 계층을 상위 계층 (소프트웨어 계층) 이라고 함
		- 데이터 생성 계층으로 주로 소프트웨어 개발 분야에서 참조

- TCP/IP Model
	-> 실제 통신에 사용되는 모델 (실제로 먼저 만들어짐)
	-> 4개의 계층으로 이루어져 있음
		4계층(Application) :  OSI 7 Layer에서 5~7 계층에 속함
		3계층(Transport) : OSI 7 Layer에서 4계층에 속함
		2계층(Internet) :  OSI 7 Layer에서 3계층에 속함
		1계층(Network Interface) : OSI 7 Layer에서 1,2 계층에 속함

	-> 1~3 계층을 하위 계층 (하드웨어 계층) 이라고 함
		- 데이터 전달 계층으로 주로 네트워크 분야에서 참조
	-> 4 계층을 상위 계층 (소프트웨어 계층) 이라고 함
		- 데이터 생성 계층으로 주로 소프트웨어 개발 분야에서 참조




- TCP (Transmission Control Protocol)
	-> 데이터 전달의 신뢰성을 최대한 보장하기 위한 방식
	-> 연결 지향
		- 데이터를 전달할 논리적인 연결을 먼저 구성 (3way-Handshake)
		- 세션 연결 설정 => 데이터 전송 => 세션 연결 해제 
	-> 신뢰성 보장
		- 순차적으로 데이터를 전송함
		- 확인 응답 및 오류시 재전송
	-> 확인한 데이터 전송을 위해 사용 됨 (FTP, HTTP 등등)

- UDP (User Datagram Protocol)
	-> 데이터의 빠른 전달을 보장하기 위해 사용됨
	-> 빠른 속도 보장을 위해 대부분의 기능을 제한 함
		- 비 신뢰성 : 확인 응답 및 재전송 작업이 없음
		- 비 연결 지향성 : 세션을 맺지 않음
	-> 빠른 데이터 전송을 위해 사용 됨 (실시간 스트리밍 서비스 등)

-> TCP, UDP는 각 각 0~65535 번의 Port 번호를 가지며 Port 번호를 가지고 서비스를 구분함
-> 대표적인 Service
	- HTTP : TCP 80
	- FTP : TCP 21, 20
	- TFTP : UDP 69  
		* 빠르게 데이터를 전송하기 위한 FTP








	
				





















